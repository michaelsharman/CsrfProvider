<!---
 *
 * THIS IS A CFML FOR OLDER VERSIONS OF COLDFUSION (CF7 ETC)
 * IDEALLY YOU'D BE USING THE SCRIPT VERSION (https://github.com/michaelsharman/CsrfProvider)
 *
 * CSRF (Cross Site Request Forgery) Protection Provider
 * @author Michael Sharman (michael[at]chapter31.com)
 * http://learnosity.com/
 *
 * v0.1 - 22 October 2012
 *
 * Ensures form submissions are coming in from the same application (same origin) that loaded the form,
 * thus providing protection from cross site request forgeries.
 * You must have an application name in Application.cfc
 * As nothing is actually stored in session (we just rely on session.sessionId), this works well across a
 * cluster (with or without sticky sessions) as well as server/application restarts
 *
 * Usage:
 * 	// This can be instantiated as a singleton or used at runtime
 * 	csrf = new CSRFProvider();
 *
 * 	// Writes a hidden form field to your view, you must pass an `intention` which should be unique per form, per application
 *	#csrf.renderToken(intention="my_unique_form_name")#
 *
 * 	// On form submission, the application must verify the token using the same `intention`
 * 	validSubmission = csrf.verifyToken(intention="my_unique_form_name", form._token);
 *
 * Options:
 * 	// Override the hidden field name (which is `_token` by default)
 * 	#csrf.renderToken(intention="my_unique_form_name", inputName="anotherName")#
 *
 * 	// Add a custom css class to the hidden field
 * 	#csrf.renderToken(intention="my_unique_form_name", className="myCssClass")#
 --->
<cfcomponent output="false">

	<cffunction name="init" access="public" output="false" returnType="any">

		<cfif (NOT isDefined("application.applicationName") OR NOT len(application.applicationName))>
			<cfthrow type="csrf.error" message="No application name found">
		</cfif>

		<cfset variables.instance.hashAlgorithm = "SHA-256">
		<cfset variables.instance.secret = hash(application.applicationName, variables.instance.hashAlgorithm)>

		<cfreturn this>
	</cffunction>


	<cffunction name="generateToken" access="private" output="false" returnType="string" hint="Generates a secure token to use in a form as a hidden field to make sure the form submission came from the correct source">
		<cfargument name="intention" type="string" required="true" hint="A unique name (per application/website) for the form. Will be used as part of the token hash">
		<cfreturn hash(variables.instance.secret & arguments.intention & getSessionId(), variables.instance.hashAlgorithm)>
	</cffunction>


	<cffunction name="getSessionId" access="private" output="false" returnType="string" hint="Returns a specific users session Id. Will be used as part of the token hash.">

		<cfreturn session.sessionId>
	</cffunction>


	<cffunction name="renderToken" access="public" output="false" returnType="string" hint="Renders a hidden form field with a secure token">
		<cfargument name="intention" type="string" required="true" hint="A unique name (per application/website) for the form. Will be used as part of the token hash">
		<cfargument name="inputName" type="string" required="false" default="_token" hint="The name of the hidden form field (defaults to `_token`)">
		<cfargument name="className" type="string" required="false" hint="A space delimited list of css classnames to add to the form field">

		<cfset var _css = "">
		<cfset var _name = "#trim(arguments.inputName)#">
		<cfset var _token = "#generateToken(jsStringFormat(trim(arguments.intention)))#">

		<cfif (structKeyExists(arguments, "className") AND len(trim(arguments.className)))>
			<cfset _css = ' class="#trim(arguments.className)#"'>
		</cfif>

		<cfreturn '<input type="hidden" name="#_name#" value="#_token#"#_css# />'>
	</cffunction>


	<cffunction name="verifyToken" access="public" output="false" returnType="string" hint="Verifies that a secure token has been generated by the application that loaded the form (same origin)">
		<cfargument name="intention" type="string" required="true" hint="A unique name (per application/website) for the form. Will be used as part of the token hash">
		<cfargument name="token" type="string" required="true" hint="The token that came through in the form submission">

		<cfreturn arguments.token EQ generateToken(jsStringFormat(trim(arguments.intention)))>
	</cffunction>

</cfcomponent>
